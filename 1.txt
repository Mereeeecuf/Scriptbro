
-- ========== SERVICES ==========
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

-- ========== PLAYER & CAMERA ==========
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- ========== DEFAULT CONFIG ==========
local DEFAULT = {
    CIRCLE_IMG_ID = "rbxassetid://80133146494844", -- marketplace circle outline
    CIRCLE_RADIUS = 120,
    SMOOTHNESS = 0.18,
    TARGET_PART = "Head",
    AKEY = Enum.KeyCode.V,
    FILTER_FRIENDS = true,
    TILT = 0,
    ESP = true,
    FOV_PIXELS = 120, -- default FOV ring radius
    SHOW_FOV = true,
    TOGGLE_SOUND = 5852470908,
    CLICK_SOUND = 6042053626,
    INTRO_SOUND = 17208361335,
}

local Config = {
    radius = DEFAULT.CIRCLE_RADIUS,
    smoothness = DEFAULT.SMOOTHNESS,
    targetPart = DEFAULT.TARGET_PART,
    filterFriends = DEFAULT.FILTER_FRIENDS,
    tilt = DEFAULT.TILT,
    esp = DEFAULT.ESP,
    fov_pixels = DEFAULT.FOV_PIXELS,
    show_fov = DEFAULT.SHOW_FOV,
    enabled = false,
}

-- ========== SOUNDS ==========
local function makeSound(id, parent)
    local s = Instance.new("Sound")
    s.SoundId = "rbxassetid://" .. tostring(id)
    s.Volume = 1
    s.PlayOnRemove = false
    s.Parent = parent or SoundService
    return s
end
local toggleSound = makeSound(DEFAULT.TOGGLE_SOUND)
local clickSound = makeSound(DEFAULT.CLICK_SOUND)
local introSound = makeSound(DEFAULT.INTRO_SOUND)

-- ========== GUI SETUP ==========
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MerebennieAimUI_" .. HttpService:GenerateGUID(false):gsub("-","")
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local main = Instance.new("Frame")
main.Name = "Main"
main.Size = UDim2.new(1,0,1,0)
main.BackgroundTransparency = 1
main.Parent = screenGui

-- ========== INTRO WATERMARK (TOP-LEFT) ==========
local watermark = Instance.new("Frame")
watermark.Name = "Watermark"
watermark.Size = UDim2.new(0,260,0,44)
watermark.Position = UDim2.new(0,8,0,8)
watermark.BackgroundTransparency = 1
watermark.Parent = main

local wmShadow = Instance.new("TextLabel")
wmShadow.Name = "Shadow"
wmShadow.Size = UDim2.new(1,6,1,6)
wmShadow.Position = UDim2.new(0,2,0,2)
wmShadow.BackgroundTransparency = 1
wmShadow.Text = "Made by Merebennie"
wmShadow.Font = Enum.Font.Arcade
wmShadow.TextSize = 18
wmShadow.TextColor3 = Color3.fromRGB(0,0,0)
wmShadow.TextStrokeTransparency = 1
wmShadow.TextXAlignment = Enum.TextXAlignment.Left
wmShadow.TextYAlignment = Enum.TextYAlignment.Top
wmShadow.Parent = watermark

local wmOutline = Instance.new("TextLabel")
wmOutline.Name = "Outline"
wmOutline.Size = UDim2.new(1,0,1,0)
wmOutline.BackgroundTransparency = 1
wmOutline.Text = "Made by Merebennie"
wmOutline.Font = Enum.Font.Arcade
wmOutline.TextSize = 18
wmOutline.TextColor3 = Color3.fromRGB(10,10,10)
wmOutline.TextStrokeTransparency = 0.6
wmOutline.TextXAlignment = Enum.TextXAlignment.Left
wmOutline.TextYAlignment = Enum.TextYAlignment.Top
wmOutline.Parent = watermark

local wmText = Instance.new("TextLabel")
wmText.Name = "Text"
wmText.Size = UDim2.new(1,0,1,0)
wmText.BackgroundTransparency = 1
wmText.Text = "Made by Merebennie"
wmText.Font = Enum.Font.Arcade
wmText.TextSize = 18
wmText.TextColor3 = Color3.fromRGB(255,255,255)
wmText.TextStrokeColor3 = Color3.fromRGB(10,10,10)
wmText.TextStrokeTransparency = 0.5
wmText.TextXAlignment = Enum.TextXAlignment.Left
wmText.TextYAlignment = Enum.TextYAlignment.Top
wmText.Parent = watermark

local wmGradientFrame = Instance.new("Frame")
wmGradientFrame.Size = UDim2.new(1,0,1,0)
wmGradientFrame.BackgroundTransparency = 1
wmGradientFrame.Parent = watermark
local uiGradient = Instance.new("UIGradient", wmGradientFrame)
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(200,200,255))
}
uiGradient.Rotation = 45

-- show animation + play intro sound then fade out
spawn(function()
    watermark.Size = UDim2.new(0,0,0,0)
    TweenService:Create(watermark, TweenInfo.new(0.45, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {Size = UDim2.new(0,260,0,44)}):Play()
    introSound:Play()
    wait(2.0)
    -- fade out text
    TweenService:Create(watermark, TweenInfo.new(0.45, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
    for i=1,20 do
        wmText.TextTransparency = i/20
        wmOutline.TextTransparency = i/20
        wmShadow.TextTransparency = i/20
        wait(0.02)
    end
    wait(0.1)
    watermark:Destroy()
end)

-- ========== FOV FRAME (visual ring that can be toggled and resized) ==========
local fovFrame = Instance.new("ImageLabel")
fovFrame.Name = "FOVFrame"
fovFrame.Image = DEFAULT.CIRCLE_IMG_ID
fovFrame.BackgroundTransparency = 1
fovFrame.Size = UDim2.new(0, Config.fov_pixels*2, 0, Config.fov_pixels*2)
fovFrame.AnchorPoint = Vector2.new(0.5,0.5)
fovFrame.Position = UDim2.new( 0.5, 0, 0.5, 0)
fovFrame.Visible = Config.show_fov
fovFrame.Parent = main

-- drop shadow behind FOV (slightly offset)
local fovShadow = Instance.new("ImageLabel")
fovShadow.Name = "FOVShadow"
fovShadow.Image = DEFAULT.CIRCLE_IMG_ID
fovShadow.BackgroundTransparency = 1
fovShadow.Size = fovFrame.Size
fovShadow.AnchorPoint = Vector2.new(0.5,0.5)
fovShadow.Position = UDim2.new( 0.5, 0, 0.5, 6)
fovShadow.ImageColor3 = Color3.fromRGB(0,0,0)
fovShadow.ImageTransparency = 0.6
fovShadow.ZIndex = 0
fovShadow.Parent = main
fovShadow.Visible = Config.show_fov

-- ========== CENTER CIRCLE (main aim circle using marketplace image) ==========
local circle = Instance.new("ImageLabel")
circle.Name = "AimCircle"
circle.Image = DEFAULT.CIRCLE_IMG_ID
circle.BackgroundTransparency = 1
circle.Size = UDim2.new(0, Config.radius*2, 0, Config.radius*2)
circle.Position = UDim2.new(0.5, -Config.radius, 0.5, -Config.radius)
circle.AnchorPoint = Vector2.new(0.5,0.5)
circle.Parent = main
circle.ZIndex = 2

-- small outline shadow for the circle
local circleShadow = Instance.new("ImageLabel")
circleShadow.Name = "CircleShadow"
circleShadow.Image = DEFAULT.CIRCLE_IMG_ID
circleShadow.BackgroundTransparency = 1
circleShadow.Size = circle.Size
circleShadow.Position = UDim2.new(0.5, -Config.radius + 4, 0.5, -Config.radius + 4)
circleShadow.AnchorPoint = Vector2.new(0.5,0.5)
circleShadow.ImageColor3 = Color3.fromRGB(0,0,0)
circleShadow.ImageTransparency = 0.65
circleShadow.ZIndex = 1
circleShadow.Parent = main
circleShadow.Visible = true

-- make circle draggable (works on mobile)
do
    local dragging = false
    local offset = Vector2.new()
    circle.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            offset = inp.Position - circle.AbsolutePosition
        end
    end)
    UserInputService.InputChanged:Connect(function(inp)
        if dragging and (inp.UserInputType == Enum.UserInputType.MouseMovement or inp.UserInputType == Enum.UserInputType.Touch) then
            local newPos = inp.Position - offset
            circle.Position = UDim2.new(0, math.clamp(newPos.X, 0, main.AbsoluteSize.X - circle.AbsoluteSize.X), 0, math.clamp(newPos.Y, 0, main.AbsoluteSize.Y - circle.AbsoluteSize.Y))
            circleShadow.Position = UDim2.new(0, math.clamp(newPos.X + 4, 0, main.AbsoluteSize.X - circleShadow.AbsoluteSize.X), 0, math.clamp(newPos.Y + 4, 0, main.AbsoluteSize.Y - circleShadow.AbsoluteSize.Y))
            fovFrame.Position = UDim2.new( 0.5, 0, 0.5, 0)
            fovShadow.Position = UDim2.new( 0.5, 0, 0.5, 6)
        end
    end)
    UserInputService.InputEnded:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end

-- ========== AIMBOT TOGGLE BUTTON ==========
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "AimbotToggle"
toggleButton.Size = UDim2.new(0,60,0,60)
toggleButton.Position = UDim2.new(0.02,0,0.78,0)
toggleButton.BackgroundColor3 = Color3.fromRGB(200,200,200)
toggleButton.Text = "Aimbot"
toggleButton.Font = Enum.Font.Arcade
toggleButton.TextSize = 18
toggleButton.TextColor3 = Color3.fromRGB(0,0,0)
toggleButton.AutoButtonColor = false
toggleButton.Parent = main
local toggleCorner = Instance.new("UICorner") toggleCorner.CornerRadius = UDim.new(1,0) toggleCorner.Parent = toggleButton

-- draggable toggle (mobile safe)
do
    local draggingToggle = false
    local toggleOffset = Vector2.new(0,0)
    toggleButton.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
            draggingToggle = true
            toggleOffset = Vector2.new(inp.Position.X - toggleButton.AbsolutePosition.X, inp.Position.Y - toggleButton.AbsolutePosition.Y)
        end
    end)
    UserInputService.InputChanged:Connect(function(inp)
        if not draggingToggle then return end
        if inp.UserInputType == Enum.UserInputType.MouseMovement or inp.UserInputType == Enum.UserInputType.Touch then
            local newPos = inp.Position - toggleOffset
            toggleButton.Position = UDim2.new(0, math.clamp(newPos.X, 0, main.AbsoluteSize.X - toggleButton.AbsoluteSize.X), 0, math.clamp(newPos.Y, 0, main.AbsoluteSize.Y - toggleButton.AbsoluteSize.Y))
        end
    end)
    UserInputService.InputEnded:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
            draggingToggle = false
        end
    end)
end

-- toggle behavior
toggleButton.MouseButton1Click:Connect(function()
    Config.enabled = not Config.enabled
    toggleButton.BackgroundColor3 = Config.enabled and Color3.fromRGB(160,160,160) or Color3.fromRGB(200,200,200)
    toggleSound:Play()

    -- Add/Remove glow effect
    if Config.enabled then
        if not toggleButton:FindFirstChild("UIStroke") then
            local glow = Instance.new("UIStroke")
            glow.Color = Color3.fromRGB(255, 255, 255)
            glow.Thickness = 3
            glow.Parent = toggleButton
        end
    else
        if toggleButton:FindFirstChild("UIStroke") then
            toggleButton:FindFirstChild("UIStroke"):Destroy()
        end
    end

    -- pop animation
    local orig = toggleButton.Size
    TweenService:Create(toggleButton, TweenInfo.new(0.12, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {Size = UDim2.new(orig.X.Scale, orig.X.Offset*1.2, orig.Y.Scale, orig.Y.Offset*1.2)}):Play()
    delay(0.09, function() TweenService:Create(toggleButton, TweenInfo.new(0.08), {Size = orig}):Play() end)
end)

-- double-tap to move to nearest spawn (implemented later)
local lastTap = 0
toggleButton.MouseButton1Click:Connect(function()
    local now = tick()
    if now - lastTap < 0.35 then
        -- will be hooked to spawn move function
        -- placeholder click sound
        clickSound:Play()
    end
    lastTap = now
end)

-- ========== SETTINGS MENU ==========
local openSettingsBtn = Instance.new("TextButton")
openSettingsBtn.Name = "OpenSettings"
openSettingsBtn.Size = UDim2.new(0,90,0,32)
openSettingsBtn.Position = UDim2.new(0.02,130,0.78,0)
openSettingsBtn.Text = "Settings"
openSettingsBtn.Font = Enum.Font.Arcade
openSettingsBtn.TextSize = 16
openSettingsBtn.Parent = main
openSettingsBtn.BackgroundColor3 = Color3.fromRGB(80,80,80)
openSettingsBtn.TextColor3 = Color3.fromRGB(255,255,255)
openSettingsBtn.AutoButtonColor = false
local openCorner = Instance.new("UICorner"); openCorner.CornerRadius = UDim.new(0,8); openCorner.Parent = openSettingsBtn

local settingsFrame = Instance.new("Frame")
settingsFrame.Name = "SettingsFrame"
settingsFrame.Size = UDim2.new(0,360,0,520)
settingsFrame.Position = UDim2.new(0.02,0,0.08,0)
settingsFrame.BackgroundColor3 = Color3.fromRGB(24,24,24)
settingsFrame.BorderSizePixel = 0
settingsFrame.Visible = false
settingsFrame.Parent = main
local sCorner = Instance.new("UICorner"); sCorner.CornerRadius = UDim.new(0,10); sCorner.Parent = settingsFrame
-- Make settings frame draggable
do
    local dragging = false
    local dragStart = Vector2.new()
    local startPos = UDim2.new()
    settingsFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = settingsFrame.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            settingsFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end


local settingsTitle = Instance.new("TextLabel")
settingsTitle.Parent = settingsFrame
settingsTitle.Size = UDim2.new(1,0,0,40)
settingsTitle.Position = UDim2.new(0,0,0,0)
settingsTitle.BackgroundTransparency = 1
settingsTitle.Text = "Aimbot Settings"
settingsTitle.Font = Enum.Font.Arcade
settingsTitle.TextSize = 20
settingsTitle.TextColor3 = Color3.fromRGB(255,255,255)

-- simple label creator
local function addLabel(parent, text, y)
    local lbl = Instance.new("TextLabel")
    lbl.Parent = parent
    lbl.Size = UDim2.new(1,-20,0,22)
    lbl.Position = UDim2.new(0,10,0,y)
    lbl.BackgroundTransparency = 1
    lbl.Text = text
    lbl.Font = Enum.Font.Arcade
    lbl.TextSize = 14
    lbl.TextColor3 = Color3.fromRGB(220,220,220)
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    return lbl
end

-- Aimbot Speed Slider
addLabel(settingsFrame, "Aimbot Speed (Smoothness)", 48)
local speedSlider = Instance.new("Frame"); speedSlider.Parent = settingsFrame; speedSlider.Size = UDim2.new(1,-20,0,26); speedSlider.Position = UDim2.new(0,10,0,80); speedSlider.BackgroundColor3 = Color3.fromRGB(50,50,50)
local speedCorner = Instance.new("UICorner"); speedCorner.CornerRadius = UDim.new(0,4); speedCorner.Parent = speedSlider
local speedKnob = Instance.new("Frame"); speedKnob.Parent = speedSlider; speedKnob.Size = UDim2.new(0,18,0,18); speedKnob.Position = UDim2.new(0,0,0.5,-9); speedKnob.BackgroundColor3 = Color3.fromRGB(220,220,220)
local speedVal = Instance.new("TextLabel"); speedVal.Parent = settingsFrame; speedVal.Position = UDim2.new(1,-90,0,80); speedVal.Size = UDim2.new(0,80,0,18); speedVal.BackgroundTransparency = 1; speedVal.TextColor3 = Color3.fromRGB(220,220,220); speedVal.Text = string.format("%.3f", Config.smoothness); speedVal.Font = Enum.Font.Arcade; speedVal.TextSize = 14

-- Tilt Slider
addLabel(settingsFrame, "Aimbot Tilt (degrees)", 120)
local tiltSlider = Instance.new("Frame"); tiltSlider.Parent = settingsFrame; tiltSlider.Size = UDim2.new(1,-20,0,26); tiltSlider.Position = UDim2.new(0,10,0,152); tiltSlider.BackgroundColor3 = Color3.fromRGB(50,50,50)
local tiltCorner = Instance.new("UICorner"); tiltCorner.CornerRadius = UDim.new(0,4); tiltCorner.Parent = tiltSlider
local tiltKnob = Instance.new("Frame"); tiltKnob.Parent = tiltSlider; tiltKnob.Size = UDim2.new(0,18,0,18); tiltKnob.Position = UDim2.new(0,0,0.5,-9); tiltKnob.BackgroundColor3 = Color3.fromRGB(220,220,220)
local tiltVal = Instance.new("TextLabel"); tiltVal.Parent = settingsFrame; tiltVal.Position = UDim2.new(1,-90,0,152); tiltVal.Size = UDim2.new(0,80,0,18); tiltVal.BackgroundTransparency = 1; tiltVal.TextColor3 = Color3.fromRGB(220,220,220); tiltVal.Text = tostring(Config.tilt); tiltVal.Font = Enum.Font.Arcade; tiltVal.TextSize = 14

-- FOV size slider (20-400 step 5)
addLabel(settingsFrame, "FOV Size (px)", 184)
local fovSlider = Instance.new("Frame"); fovSlider.Parent = settingsFrame; fovSlider.Size = UDim2.new(1,-20,0,26); fovSlider.Position = UDim2.new(0,10,0,216); fovSlider.BackgroundColor3 = Color3.fromRGB(50,50,50)
local fovKnob = Instance.new("Frame"); fovKnob.Parent = fovSlider; fovKnob.Size = UDim2.new(0,18,0,18); fovKnob.Position = UDim2.new(0,0,0.5,-9); fovKnob.BackgroundColor3 = Color3.fromRGB(220,220,220)
local fovVal = Instance.new("TextLabel"); fovVal.Parent = settingsFrame; fovVal.Position = UDim2.new(1,-90,0,216); fovVal.Size = UDim2.new(0,80,0,18); fovVal.BackgroundTransparency = 1; fovVal.TextColor3 = Color3.fromRGB(220,220,220); fovVal.Text = tostring(Config.fov_pixels); fovVal.Font = Enum.Font.Arcade; fovVal.TextSize = 14

-- FOV toggle
addLabel(settingsFrame, "Tampilkan Cincin FOV", 248)
local fovToggle = Instance.new("TextButton"); fovToggle.Parent = settingsFrame; fovToggle.Size = UDim2.new(0,64,0,26); fovToggle.Position = UDim2.new(1,-90,0,248); fovToggle.Text = Config.show_fov and "ON" or "OFF"; fovToggle.Font = Enum.Font.Arcade; fovToggle.TextSize = 14; fovToggle.AutoButtonColor = false; fovToggle.BackgroundColor3 = Config.show_fov and Color3.fromRGB(30,140,70) or Color3.fromRGB(140,40,40)

-- Target dropdown
addLabel(settingsFrame, "Aimbot Target Part", 288)
local targetDropdown = Instance.new("TextButton"); targetDropdown.Parent = settingsFrame; targetDropdown.Size = UDim2.new(1,-20,0,28); targetDropdown.Position = UDim2.new(0,10,0,320); targetDropdown.BackgroundColor3 = Color3.fromRGB(50,50,50); targetDropdown.Font = Enum.Font.Arcade; targetDropdown.TextSize = 14; targetDropdown.TextColor3 = Color3.fromRGB(220,220,220); targetDropdown.Text = Config.targetPart; targetDropdown.AutoButtonColor = false; local tdCorner = Instance.new("UICorner"); tdCorner.CornerRadius = UDim.new(0,6); tdCorner.Parent = targetDropdown

local ddList = Instance.new("Frame"); ddList.Parent = settingsFrame; ddList.Size = UDim2.new(1,-20,0,60); ddList.Position = UDim2.new(0,10,0,352); ddList.BackgroundTransparency = 1; ddList.Visible = false
local function ddItem(text, y)
    local b = Instance.new("TextButton"); b.Parent = ddList; b.Size = UDim2.new(1,0,0,30); b.Position = UDim2.new(0,0,0,(y-1)*30); b.Text = text; b.Font = Enum.Font.Arcade; b.TextSize = 14; b.TextColor3 = Color3.fromRGB(220,220,220); b.BackgroundColor3 = Color3.fromRGB(40,40,40); b.AutoButtonColor = false; local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(0,6); c.Parent = b; return b end
local ddHead = ddItem("Head",1)
local ddHRP = ddItem("HumanoidRootPart",2)

-- Filter friends toggle
addLabel(settingsFrame, "Filter Friends", 420)
local filterToggle = Instance.new("TextButton"); filterToggle.Parent = settingsFrame; filterToggle.Size = UDim2.new(0,64,0,26); filterToggle.Position = UDim2.new(1,-90,0,420); filterToggle.Text = Config.filterFriends and "ON" or "OFF"; filterToggle.Font = Enum.Font.Arcade; filterToggle.TextSize = 14; filterToggle.AutoButtonColor = false; filterToggle.BackgroundColor3 = Config.filterFriends and Color3.fromRGB(30,140,70) or Color3.fromRGB(140,40,40)

-- ESP toggle
addLabel(settingsFrame, "ESP (Names + Distance)", 456)
local espToggle = Instance.new("TextButton"); espToggle.Parent = settingsFrame; espToggle.Size = UDim2.new(0,64,0,26); espToggle.Position = UDim2.new(1,-90,0,456); espToggle.Text = Config.esp and "ON" or "OFF"; espToggle.Font = Enum.Font.Arcade; espToggle.TextSize = 14; espToggle.AutoButtonColor = false; espToggle.BackgroundColor3 = Config.esp and Color3.fromRGB(30,140,70) or Color3.fromRGB(140,40,40)

-- Spawn manager controls
addLabel(settingsFrame, "Spawn Manager (tap 'Set Spawn' then click ground)", 490)
local setSpawnBtn = Instance.new("TextButton"); setSpawnBtn.Parent = settingsFrame; setSpawnBtn.Size = UDim2.new(0,140,0,28); setSpawnBtn.Position = UDim2.new(0,10,0,520); setSpawnBtn.Text = "Set Spawn"; setSpawnBtn.Font = Enum.Font.Arcade; setSpawnBtn.TextSize = 14; setSpawnBtn.AutoButtonColor = false; setSpawnBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
local clearSpawnsBtn = Instance.new("TextButton"); clearSpawnsBtn.Parent = settingsFrame; clearSpawnsBtn.Size = UDim2.new(0,140,0,28); clearSpawnsBtn.Position = UDim2.new(0,170,0,520); clearSpawnsBtn.Text = "Clear Spawns"; clearSpawnsBtn.Font = Enum.Font.Arcade; clearSpawnsBtn.TextSize = 14; clearSpawnsBtn.AutoButtonColor = false; clearSpawnsBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)

-- clamp utility
local function clamp(v, a, b) if v < a then return a elseif v > b then return b else return v end end

-- ========== SETTINGS INTERACTIONS ==========
openSettingsBtn.MouseButton1Click:Connect(function()
    settingsFrame.Visible = not settingsFrame.Visible
    clickSound:Play()
    -- pop animation
    TweenService:Create(openSettingsBtn, TweenInfo.new(0.08, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0,98,0,34)}):Play()
    delay(0.08, function() TweenService:Create(openSettingsBtn, TweenInfo.new(0.08), {Size = UDim2.new(0,90,0,32)}):Play() end)
end)

targetDropdown.MouseButton1Click:Connect(function() ddList.Visible = not ddList.Visible; clickSound:Play() end)
ddHead.MouseButton1Click:Connect(function() Config.targetPart = "Head"; targetDropdown.Text = "Head"; ddList.Visible = false; clickSound:Play() end)
ddHRP.MouseButton1Click:Connect(function() Config.targetPart = "HumanoidRootPart"; targetDropdown.Text = "HumanoidRootPart"; ddList.Visible = false; clickSound:Play() end)

filterToggle.MouseButton1Click:Connect(function() Config.filterFriends = not Config.filterFriends; filterToggle.Text = Config.filterFriends and "ON" or "OFF"; filterToggle.BackgroundColor3 = Config.filterFriends and Color3.fromRGB(30,140,70) or Color3.fromRGB(140,40,40); clickSound:Play() end)
espToggle.MouseButton1Click:Connect(function() Config.esp = not Config.esp; espToggle.Text = Config.esp and "ON" or "OFF"; espToggle.BackgroundColor3 = Config.esp and Color3.fromRGB(30,140,70) or Color3.fromRGB(140,40,40); clickSound:Play() end)
fovToggle.MouseButton1Click:Connect(function() Config.show_fov = not Config.show_fov; fovToggle.Text = Config.show_fov and "ON" or "OFF"; fovToggle.BackgroundColor3 = Config.show_fov and Color3.fromRGB(30,140,70) or Color3.fromRGB(140,40,40); fovFrame.Visible = Config.show_fov; fovShadow.Visible = Config.show_fov; clickSound:Play() end)

-- slider handler (mobile-friendly)
local function setupSlider(frame, knob, minVal, maxVal, startVal, onChange, label, step)
    local dragging = false
    local function update(px)
        local localX = clamp(px - frame.AbsolutePosition.X, 0, frame.AbsoluteSize.X)
        local t = localX / frame.AbsoluteSize.X
        local val = minVal + (maxVal - minVal) * t
        if step and step > 0 then
            val = math.floor(val/step + 0.5) * step
        end
        onChange(val)
        knob.Position = UDim2.new(0, clamp(localX - knob.AbsoluteSize.X/2, 0, frame.AbsoluteSize.X - knob.AbsoluteSize.X), 0, (frame.AbsoluteSize.Y - knob.AbsoluteSize.Y)/2)
        if label then label.Text = (type(val)=="number" and (step and tostring(val) or string.format("%.3f", val)) or tostring(val)) end
    end
    knob.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then dragging = true end
    end)
    UserInputService.InputChanged:Connect(function(inp)
        if dragging and (inp.UserInputType == Enum.UserInputType.MouseMovement or inp.UserInputType == Enum.UserInputType.Touch) then update(inp.Position.X) end
    end)
    UserInputService.InputEnded:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then dragging = false end
    end)
    frame.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then update(inp.Position.X) end
    end)
    spawn(function()
        wait(0.12)
        local t = (startVal - minVal) / (maxVal - minVal)
        local px = clamp(t * frame.AbsoluteSize.X - knob.AbsoluteSize.X/2, 0, frame.AbsoluteSize.X - knob.AbsoluteSize.X)
        knob.Position = UDim2.new(0, px, 0, (frame.AbsoluteSize.Y - knob.AbsoluteSize.Y)/2)
    end)
end

-- connect sliders
spawn(function()
    wait(0.12)
    setupSlider(speedSlider, speedKnob, 0.01, 0.6, Config.smoothness, function(v) Config.smoothness = v; speedVal.Text = string.format("%.3f", v) end, speedVal, nil)
    setupSlider(tiltSlider, tiltKnob, -30, 30, Config.tilt, function(v) Config.tilt = v; tiltVal.Text = string.format("%.1f", v) end, tiltVal, nil)
    setupSlider(fovSlider, fovKnob, 20, 400, Config.fov_pixels, function(v) Config.fov_pixels = v; fovVal.Text = tostring(v); fovFrame.Size = UDim2.new(0, v*2, 0, v*2); fovShadow.Size = UDim2.new(0, v*2, 0, v*2) end, fovVal, 5)
end)

-- ========== SPAWN PLACEMENT ==========
local placingSpawn = false
local SpawnParts = {}
setSpawnBtn.MouseButton1Click:Connect(function() placingSpawn = not placingSpawn; setSpawnBtn.Text = placingSpawn and "Click ground..." or "Set Spawn"; clickSound:Play() end)
clearSpawnsBtn.MouseButton1Click:Connect(function() for i,p in ipairs(SpawnParts) do if p and p.Parent then p:Destroy() end end; SpawnParts = {}; clickSound:Play() end)

local function placeSpawnAtScreenPos(screenPos)
    local ray = Camera:ScreenPointToRay(screenPos.X, screenPos.Y)
    local rp = RaycastParams.new(); rp.FilterType = Enum.RaycastFilterType.Blacklist; rp.FilterDescendantsInstances = {LocalPlayer.Character or LocalPlayer}
    local res = Workspace:Raycast(ray.Origin, ray.Direction*5000, rp)
    if res then
        local part = Instance.new("Part")
        part.Size = Vector3.new(2,0.2,2); part.Anchored = true; part.CanCollide = false; part.Position = res.Position + Vector3.new(0,0.1,0)
        part.BrickColor = BrickColor.new("Bright red"); part.Material = Enum.Material.Neon; part.Parent = Workspace
        table.insert(SpawnParts, part)
        local orig = part.Size; part.Size = Vector3.new(0.1,0.1,0.1)
        TweenService:Create(part, TweenInfo.new(0.18, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {Size = orig}):Play()
        clickSound:Play()
    end
end

UserInputService.InputBegan:Connect(function(inp, processed)
    if processed then return end
    if placingSpawn and (inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch) then
        placeSpawnAtScreenPos(inp.Position)
        placingSpawn = false; setSpawnBtn.Text = "Set Spawn"
    end
end)

-- move to nearest spawn (tween HRP)
local function moveToNearestSpawn()
    if #SpawnParts == 0 then return end
    local char = LocalPlayer.Character; if not char or not char:FindFirstChild("HumanoidRootPart") then return end
    local hrp = char.HumanoidRootPart; local nearest, nd = nil, math.huge
    for _, p in ipairs(SpawnParts) do if p and p.Parent then local d = (p.Position - hrp.Position).Magnitude; if d < nd then nd = d; nearest = p end end end
    if nearest then pcall(function() TweenService:Create(hrp, TweenInfo.new(0.6, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = nearest.CFrame + CFrame.new(0,2,0)}):Play() end) end
end

-- double-tap on toggleButton triggers moveToNearestSpawn
local lastToggleTap = 0
toggleButton.MouseButton1Click:Connect(function()
    local now = tick()
    if now - lastToggleTap < 0.35 then moveToNearestSpawn() end
    lastToggleTap = now
end)

-- keybind for PC (V)
UserInputService.InputBegan:Connect(function(inp, processed)
    if processed then return end
    if inp.UserInputType == Enum.UserInputType.Keyboard and inp.KeyCode == DEFAULT.AKEY then
        Config.enabled = not Config.enabled
        toggleButton.BackgroundColor3 = Config.enabled and Color3.fromRGB(160,160,160) or Color3.fromRGB(200,200,200)
        toggleSound:Play()

    -- Add/Remove glow effect
    if Config.enabled then
        if not toggleButton:FindFirstChild("UIStroke") then
            local glow = Instance.new("UIStroke")
            glow.Color = Color3.fromRGB(255, 255, 255)
            glow.Thickness = 3
            glow.Parent = toggleButton
        end
    else
        if toggleButton:FindFirstChild("UIStroke") then
            toggleButton:FindFirstChild("UIStroke"):Destroy()
        end
    end

    end
end)

-- ========== ESP SYSTEM ==========
local function createOrUpdateBillboard(player)
    if player == LocalPlayer then return end
    if not player.Character then return end
    if not Config.esp then
        if player.Character:FindFirstChild("MereESP") then player.Character:FindFirstChild("MereESP"):Destroy() end
        return
    end
    if player.Character:FindFirstChild("MereESP") then return end
    local hrp = player.Character:FindFirstChild("HumanoidRootPart") or player.Character:FindFirstChild("Head")
    if not hrp then return end
    local bb = Instance.new("BillboardGui"); bb.Name = "MereESP"; bb.Adornee = hrp; bb.Size = UDim2.new(0,140,0,28); bb.AlwaysOnTop = true; bb.Parent = player.Character
    local frame = Instance.new("Frame"); frame.Size = UDim2.new(1,0,1,0); frame.BackgroundTransparency = 0.35; frame.BackgroundColor3 = Color3.fromRGB(20,20,20); frame.BorderSizePixel = 0; frame.Parent = bb
    -- Add highlight to target
    local highlight = Instance.new("Highlight")
    highlight.Name = "MereHighlight"
    highlight.Adornee = player.Character
    highlight.FillColor = Color3.fromRGB(255, 255, 0)
    highlight.FillTransparency = 0.5
    highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
    highlight.OutlineTransparency = 0
    highlight.Parent = player.Character

    local nameLbl = Instance.new("TextLabel"); nameLbl.Parent = frame; nameLbl.Size = UDim2.new(1,0,0.6,0); nameLbl.BackgroundTransparency = 1; nameLbl.Text = player.Name; nameLbl.Font = Enum.Font.Arcade; nameLbl.TextSize = 14; nameLbl.TextColor3 = Color3.fromRGB(255,255,255); nameLbl.TextStrokeTransparency = 0.6
    local distLbl = Instance.new("TextLabel"); distLbl.Parent = frame; distLbl.Size = UDim2.new(1,0,0.4,0); distLbl.Position = UDim2.new(0,0,0.6,0); distLbl.BackgroundTransparency = 1; distLbl.Font = Enum.Font.Arcade; distLbl.TextSize = 12; distLbl.TextColor3 = Color3.fromRGB(200,200,200)
    
    -- Add line from local player to target
    local line = Instance.new("Part")
    line.Name = "MereLine"
    line.Anchored = true
    line.CanCollide = false
    line.Material = Enum.Material.Neon
    line.Color = Color3.fromRGB(255, 255, 0)
    line.Size = Vector3.new(0.1, 0.1, 0.1)
    line.Parent = Workspace

    spawn(function()
        while line and line.Parent and player.Character and LocalPlayer.Character do
            local hrpTarget = player.Character:FindFirstChild("HumanoidRootPart")
            local hrpLocal = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrpTarget and hrpLocal then
                local startPos = hrpLocal.Position
                local endPos = hrpTarget.Position
                local dist = (endPos - startPos).Magnitude
                line.Size = Vector3.new(0.05, 0.05, dist)
                line.CFrame = CFrame.new(startPos, endPos) * CFrame.new(0, 0, -dist/2)
            end
            wait(0.05)
        end
        if line then line:Destroy() end
    end)

    spawn(function()
        while bb and bb.Parent do
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local d = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                distLbl.Text = string.format("%.1f studs", d)
            end
            wait(0.45)
        end
    end)
end

Players.PlayerAdded:Connect(function(p) p.CharacterAdded:Connect(function() wait(0.15); createOrUpdateBillboard(p) end) end)
for _, p in ipairs(Players:GetPlayers()) do if p.Character then createOrUpdateBillboard(p) end; p.CharacterAdded:Connect(function() wait(0.12); createOrUpdateBillboard(p) end) end

espToggle.MouseButton1Click:Connect(function()
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character then
            if Config.esp then createOrUpdateBillboard(p) else local tag = p.Character:FindFirstChild("MereESP"); if tag then tag:Destroy() end end
        end
    end
end)

-- ========== FRIENDS FILTER HELPER ==========
local FriendIDs = {}
local gotFriends = false
spawn(function()
    pcall(function()
        local ok, pages = pcall(function() return Players:GetFriendsAsync(LocalPlayer.UserId) end)
        if ok and pages then for _, f in ipairs(pages:GetCurrentPage()) do FriendIDs[f.Id] = true end; gotFriends = true end
    end)
end)
local function isFriend(id) if not Config.filterFriends then return false end if gotFriends then return FriendIDs[id] == true end local ok, pages = pcall(function() return Players:GetFriendsAsync(LocalPlayer.UserId) end) if ok and pages then for _, f in ipairs(pages:GetCurrentPage()) do FriendIDs[f.Id] = true end; gotFriends = true; return FriendIDs[id] == true end return false end

-- ========== AIMLOCK CORE ==========
local lastCameraInput = 0
UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Gamepad1 then lastCameraInput = tick() end
end)

local function worldToScreenPoint(vec)
    local sp, onScreen = Camera:WorldToViewportPoint(vec)
    return Vector2.new(sp.X, sp.Y), onScreen
end

local function pointInsideCircle(screenPoint)
    local absPos = circle.AbsolutePosition
    local absSize = circle.AbsoluteSize
    local center = Vector2.new(absPos.X + absSize.X/2, absPos.Y + absSize.Y/2)
    local dist = (screenPoint - center).Magnitude
    return dist <= Config.radius
end

local function getNearestTarget()
    local nearest = nil
    local nd = math.huge
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character.Parent then
            local hum = p.Character:FindFirstChildOfClass("Humanoid")
            if hum and hum.Health > 0 then
                if Config.filterFriends and isFriend(p.UserId) then
                    -- skip friends
                else
                    local tp = p.Character:FindFirstChild(Config.targetPart)
                    if tp then
                        local sp, onScreen = worldToScreenPoint(tp.Position)
                        if onScreen and pointInsideCircle(sp) then
                            local d = (tp.Position - (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position or Camera.CFrame.Position)).Magnitude
                            if d < nd then nd = d; nearest = p end
                        end
                    end
                end
            end
        end
    end
    return nearest
end

local currentTarget = nil

local function aimStep(dt)
    if not Config.enabled then currentTarget = nil; return end
    if not LocalPlayer.Character or not LocalPlayer.Character.Parent then return end
    -- validate target
    if not currentTarget or not currentTarget.Character or not currentTarget.Character.Parent or (currentTarget.Character:FindFirstChildOfClass("Humanoid") and currentTarget.Character:FindFirstChildOfClass("Humanoid").Health <= 0) then
        currentTarget = getNearestTarget()
    else
        local tp = currentTarget.Character:FindFirstChild(Config.targetPart)
        if not tp then currentTarget = getNearestTarget() else
            local sp, onScreen = worldToScreenPoint(tp.Position)
            if not (onScreen and pointInsideCircle(sp)) then currentTarget = getNearestTarget() end
        end
    end

    if currentTarget and currentTarget.Character and currentTarget.Character.Parent then
        local tp = currentTarget.Character:FindFirstChild(Config.targetPart)
        if tp then
            local sinceInput = tick() - lastCameraInput
            local influence = 1 - math.clamp(sinceInput / 0.22, 0, 1)
            local smooth = math.clamp(Config.smoothness * influence, 0.005, 0.9)

            local camPos = Camera.CFrame.Position
            local targetPos = tp.Position

            if Config.tilt ~= 0 then
                local dir = (targetPos - camPos).Unit
                local dist = (targetPos - camPos).Magnitude
                local tiltRad = math.rad(Config.tilt)
                local pitched = CFrame.new(Vector3.new(), dir) * CFrame.Angles(tiltRad,0,0)
                targetPos = camPos + pitched.LookVector * dist
            end

            local desired = CFrame.new(camPos, targetPos)
            local current = Camera.CFrame
            local alpha = 1 - math.clamp(1 - smooth, 0, 0.999)
            local newC = current:Lerp(desired, alpha)
            Camera.CFrame = newC
        end
    end
end

RunService:BindToRenderStep("MereAimStep", Enum.RenderPriority.Camera.Value + 1, function(dt) aimStep(dt) end)

-- ========== CLEANUP & INIT =========
circle.Size = UDim2.new(0, Config.radius*2, 0, Config.radius*2)
circle.Position = UDim2.new(0.5, -Config.radius, 0.5, -Config.radius)
fovFrame.Size = UDim2.new(0, Config.fov_pixels*2, 0, Config.fov_pixels*2)
fovShadow.Size = fovFrame.Size
fovFrame.AnchorPoint = Vector2.new(0.5,0.5)
fovShadow.AnchorPoint = Vector2.new(0.5,0.5)
fovFrame.Position = circle.Position + UDim2.new(0, Config.radius, 0, Config.radius)
fovShadow.Position = fovFrame.Position + UDim2.new(0,0,0,6)

-- ESP initial
for _, p in ipairs(Players:GetPlayers()) do if p.Character then createOrUpdateBillboard(p) end end

-- auto-hide settings when clicking outside
screenGui.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
        local target = inp.Target
        local inside = target and (target:IsDescendantOf(settingsFrame) or target == openSettingsBtn)
        if not inside and settingsFrame.Visible then settingsFrame.Visible = false end
    end
end)

-- usage hint
local hint = Instance.new("TextLabel")
hint.Parent = main
hint.Size = UDim2.new(0,380,0,28)
hint.Position = UDim2.new(0.02,0,0.72,0)
hint.BackgroundTransparency = 0.6
hint.BackgroundColor3 = Color3.fromRGB(16,16,16)
hint.TextColor3 = Color3.fromRGB(255,255,255)
hint.Text = "Press V or tap 'Aimbot' to toggle. Double-tap Aimbot to move to spawn."
hint.Font = Enum.Font.Arcade
hint.TextSize = 14
local hintCorner = Instance.new("UICorner") hintCorner.CornerRadius = UDim.new(0,6) hintCorner.Parent = hint

print("[MerebennieAim] Loaded. Delta Mobile compatible. Defaults: radius="..tostring(Config.radius).." smooth="..tostring(Config.smoothness).." target="..tostring(Config.targetPart))
